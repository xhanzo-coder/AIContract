{
  "info": {
    "name": "合同档案管理API - 完整版本",
    "description": "合同档案管理系统API测试集合，包含OCR处理、内容分块、Elasticsearch搜索等完整功能",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "3.0.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "contract_id",
      "value": "20",
      "type": "string"
    },
    {
      "key": "session_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "message_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. 健康检查",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has status field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData.status).to.eql('healthy');",
              "});",
              "",
              "pm.test(\"Response time is less than 1000ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        },
        "description": "检查服务器运行状态"
      }
    },
    {
      "name": "2. 上传合同文件",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Upload successful\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('contract_id');",
              "    pm.expect(jsonData).to.have.property('message');",
              "    ",
              "    // 保存contract_id到环境变量",
              "    pm.collectionVariables.set(\"contract_id\", jsonData.contract_id);",
              "    console.log(\"Contract ID saved: \" + jsonData.contract_id);",
              "});",
              "",
              "pm.test(\"OCR processing started\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.ocr_status).to.be.oneOf(['processing', 'pending']);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": [],
              "description": "选择要上传的PDF文件"
            },
            {
              "key": "title",
              "value": "测试合同文档",
              "type": "text",
              "description": "合同标题"
            },
            {
              "key": "description",
              "value": "这是一个用于测试GLM-4.1V OCR功能的合同文档",
              "type": "text",
              "description": "合同描述"
            }
          ]
        },
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/upload",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "upload"]
        },
        "description": "上传合同文件并自动触发OCR处理"
      }
    },
    {
      "name": "3. 获取合同列表",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has contracts array\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('contracts');",
              "    pm.expect(jsonData.contracts).to.be.an('array');",
              "});",
              "",
              "pm.test(\"Response has pagination info\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('total');",
              "    pm.expect(jsonData).to.have.property('skip');",
              "    pm.expect(jsonData).to.have.property('limit');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/?skip=0&limit=10",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", ""],
          "query": [
            {
              "key": "skip",
              "value": "0",
              "description": "跳过的记录数"
            },
            {
              "key": "limit",
              "value": "10",
              "description": "返回的记录数限制"
            }
          ]
        },
        "description": "分页获取所有合同列表"
      }
    },
    {
      "name": "4. 获取合同详情",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has contract details\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('title');",
              "    pm.expect(jsonData).to.have.property('filename');",
              "    pm.expect(jsonData).to.have.property('ocr_status');",
              "});",
              "",
              "pm.test(\"Contract ID matches\", function () {",
              "    var jsonData = pm.response.json();",
              "    var expectedId = 20;",
              "    pm.expect(jsonData.id).to.eql(expectedId);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/{{contract_id}}",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "{{contract_id}}"]
        },
        "description": "获取指定合同的详细信息"
      }
    },
    {
      "name": "5. 查询OCR状态",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has OCR status\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('contract_id');",
              "    pm.expect(jsonData).to.have.property('ocr_status');",
              "    pm.expect(jsonData.ocr_status).to.be.oneOf(['pending', 'processing', 'completed', 'failed']);",
              "});",
              "",
              "// 如果还在处理中，5秒后自动重新查询",
              "pm.test(\"Auto retry if processing\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.ocr_status === 'processing') {",
              "        console.log(\"OCR still processing, will retry in 5 seconds...\");",
              "        setTimeout(function(){",
              "            postman.setNextRequest(\"5. 查询OCR状态\");",
              "        }, 5000);",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/{{contract_id}}/ocr-status",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "{{contract_id}}", "ocr-status"]
        },
        "description": "查询合同OCR处理状态"
      }
    },
    {
      "name": "6. 手动触发OCR处理 (GLM-4.1V)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"OCR processing started\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData).to.have.property('contract_id');",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData.status).to.eql('processing');",
              "});",
              "",
              "pm.test(\"GLM-4.1V model specified\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.model) {",
              "        pm.expect(jsonData.model).to.include('GLM-4.1V');",
              "    }",
              "});",
              "",
              "// 自动等待5秒后查询状态",
              "setTimeout(function(){",
              "    postman.setNextRequest(\"5. 查询OCR状态\");",
              "}, 5000);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/{{contract_id}}/process-ocr",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "{{contract_id}}", "process-ocr"]
        },
        "description": "手动触发合同OCR处理（使用GLM-4.1V模型）"
      }
    },
    {
      "name": "7. 获取内容状态",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has content status\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('contract_id');",
              "    pm.expect(jsonData).to.have.property('has_text_content');",
              "    pm.expect(jsonData).to.have.property('chunk_count');",
              "    pm.expect(jsonData).to.have.property('text_file_exists');",
              "});",
              "",
              "pm.test(\"Contract ID matches\", function () {",
              "    var jsonData = pm.response.json();",
              "    var expectedId = 20;",
              "    pm.expect(jsonData.contract_id).to.eql(expectedId);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/{{contract_id}}/content/status",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "{{contract_id}}", "content", "status"]
        },
        "description": "获取合同内容处理状态"
      }
    },
    {
      "name": "8. 处理内容分块",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Content processing successful\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData).to.have.property('contract_id');",
              "    pm.expect(jsonData).to.have.property('chunks_created');",
              "    pm.expect(jsonData.chunks_created).to.be.a('number');",
              "    pm.expect(jsonData.chunks_created).to.be.above(0);",
              "});",
              "",
              "pm.test(\"Processing details provided\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.include('处理完成');",
              "    console.log('Chunks created: ' + jsonData.chunks_created);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/{{contract_id}}/content/process",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "{{contract_id}}", "content", "process"]
        },
        "description": "处理合同内容并生成分块"
      }
    },
    {
      "name": "9. 获取分块列表",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has chunks array\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('chunks');",
              "    pm.expect(jsonData.chunks).to.be.an('array');",
              "});",
              "",
              "pm.test(\"Response has pagination info\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('total');",
              "    pm.expect(jsonData).to.have.property('page');",
              "    pm.expect(jsonData).to.have.property('size');",
              "});",
              "",
              "pm.test(\"Chunks have required fields\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.chunks.length > 0) {",
              "        var chunk = jsonData.chunks[0];",
              "        pm.expect(chunk).to.have.property('id');",
              "        pm.expect(chunk).to.have.property('chunk_index');",
              "        pm.expect(chunk).to.have.property('content_text');",
              "        pm.expect(chunk).to.have.property('chunk_type');",
              "        pm.expect(chunk).to.have.property('chunk_size');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/{{contract_id}}/content/chunks?page=1&size=10",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "{{contract_id}}", "content", "chunks"],
          "query": [
            {
              "key": "page",
              "value": "1",
              "description": "页码"
            },
            {
              "key": "size",
              "value": "10",
              "description": "每页大小"
            }
          ]
        },
        "description": "分页获取合同内容分块列表"
      }
    },
    {
      "name": "10. 获取自动化处理状态",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has automated processing status\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data).to.have.property('contract_id');",
              "    pm.expect(jsonData.data).to.have.property('overall_status');",
              "    pm.expect(jsonData.data).to.have.property('processing_steps');",
              "});",
              "",
              "pm.test(\"Processing steps have required fields\", function () {",
              "    var jsonData = pm.response.json();",
              "    var steps = jsonData.data.processing_steps;",
              "    pm.expect(steps).to.have.property('ocr_recognition');",
              "    pm.expect(steps).to.have.property('content_chunking');",
              "    pm.expect(steps).to.have.property('elasticsearch_sync');",
              "    ",
              "    // 检查每个步骤的状态",
              "    pm.expect(steps.ocr_recognition).to.have.property('status');",
              "    pm.expect(steps.ocr_recognition).to.have.property('completed');",
              "    pm.expect(steps.content_chunking).to.have.property('status');",
              "    pm.expect(steps.content_chunking).to.have.property('completed');",
              "    pm.expect(steps.elasticsearch_sync).to.have.property('status');",
              "    pm.expect(steps.elasticsearch_sync).to.have.property('completed');",
              "});",
              "",
              "pm.test(\"Overall status is valid\", function () {",
              "    var jsonData = pm.response.json();",
              "    var validStatuses = ['pending', 'processing', 'completed', 'failed'];",
              "    pm.expect(validStatuses).to.include(jsonData.data.overall_status);",
              "    console.log('Overall processing status: ' + jsonData.data.overall_status);",
              "    console.log('OCR status: ' + jsonData.data.processing_steps.ocr_recognition.status);",
              "    console.log('Content chunks: ' + jsonData.data.content_chunks);",
              "    console.log('Elasticsearch synced: ' + jsonData.data.elasticsearch_synced);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/{{contract_id}}/automated-status",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "{{contract_id}}", "automated-status"]
        },
        "description": "获取合同自动化处理的综合状态（OCR识别、文档切块、Elasticsearch同步）"
      }
    },
    {
      "name": "11. 搜索分块",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has chunks array\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('chunks');",
              "    pm.expect(jsonData.chunks).to.be.an('array');",
              "});",
              "",
              "pm.test(\"Response has search info\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('total');",
              "    pm.expect(jsonData).to.have.property('page');",
              "    pm.expect(jsonData).to.have.property('size');",
              "    pm.expect(jsonData).to.have.property('query');",
              "});",
              "",
              "pm.test(\"Search results relevant\", function () {",
              "    var jsonData = pm.response.json();",
              "    console.log('Search query: ' + jsonData.query);",
              "    console.log('Results found: ' + jsonData.total);",
              "    if (jsonData.chunks.length > 0) {",
              "        var chunk = jsonData.chunks[0];",
              "        pm.expect(chunk).to.have.property('content_text');",
              "        console.log('First result preview: ' + chunk.content_text.substring(0, 100) + '...');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/{{contract_id}}/content/search?q=合同&page=1&size=5",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "{{contract_id}}", "content", "search"],
          "query": [
            {
              "key": "q",
              "value": "合同",
              "description": "搜索关键词"
            },
            {
              "key": "page",
              "value": "1",
              "description": "页码"
            },
            {
              "key": "size",
              "value": "5",
              "description": "每页大小"
            }
          ]
        },
        "description": "在合同内容分块中搜索关键词"
      }
    },
    {
      "name": "12. Elasticsearch 健康检查",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Elasticsearch is available\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('elasticsearch_available');",
              "    pm.expect(jsonData.elasticsearch_available).to.be.true;",
              "});",
              "",
              "pm.test(\"Response has cluster info\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('cluster_name');",
              "    pm.expect(jsonData).to.have.property('version');",
              "    console.log('Elasticsearch cluster: ' + jsonData.cluster_name);",
              "    console.log('Elasticsearch version: ' + jsonData.version);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/elasticsearch/status",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "elasticsearch", "status"]
        },
        "description": "检查 Elasticsearch 服务状态和连接"
      }
    },
    {
      "name": "13. 初始化 Elasticsearch 索引",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Indices created successfully\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData).to.have.property('indices_created');",
              "    pm.expect(jsonData.indices_created).to.be.an('array');",
              "    console.log('Created indices: ' + JSON.stringify(jsonData.indices_created));",
              "});",
              "",
              "pm.test(\"Required indices exist\", function () {",
              "    var jsonData = pm.response.json();",
              "    var indices = jsonData.indices_created;",
              "    pm.expect(indices).to.include('contracts');",
              "    pm.expect(indices).to.include('contract_contents');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/elasticsearch/init",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "elasticsearch", "init"]
        },
        "description": "初始化 Elasticsearch 索引（合同索引和内容索引）"
      }
    },
    {
      "name": "14. 同步合同到 Elasticsearch",
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Sync completed successfully\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('message');",
                "    pm.expect(jsonData).to.have.property('synced_contracts');",
                "    pm.expect(jsonData).to.have.property('synced_contents');",
                "    console.log('Synced contracts: ' + jsonData.synced_contracts);",
                "    console.log('Synced contents: ' + jsonData.synced_contents);",
                "});",
                "",
                "pm.test(\"Sync statistics valid\", function () {",
                "    var jsonData = pm.response.json();",
                "    pm.expect(jsonData.synced_contracts).to.be.a('number');",
                "    pm.expect(jsonData.synced_contents).to.be.a('number');",
                "    pm.expect(jsonData.synced_contracts).to.be.at.least(0);",
                "    pm.expect(jsonData.synced_contents).to.be.at.least(0);",
                "});"
              ],
              "type": "text/javascript"
            }
          }
        ],
        "request": {
          "method": "POST",
          "header": [],
          "url": {
          "raw": "{{base_url}}/api/v1/contracts/{{contract_id}}/elasticsearch/sync",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "{{contract_id}}", "elasticsearch", "sync"]
        },
          "description": "将现有合同数据同步到 Elasticsearch 索引"
        }
    },
    {
      "name": "15. 自动化处理合同（OCR+切片+ES同步）",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Automated processing started\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data).to.have.property('contract_id');",
              "    pm.expect(jsonData.data).to.have.property('processing_status');",
              "});",
              "",
              "pm.test(\"Processing steps initiated\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('steps_initiated');",
              "    pm.expect(jsonData.data.steps_initiated).to.be.an('array');",
              "    pm.expect(jsonData.data.steps_initiated).to.include('OCR识别');",
              "    pm.expect(jsonData.data.steps_initiated).to.include('文档切块');",
              "    pm.expect(jsonData.data.steps_initiated).to.include('Elasticsearch同步');",
              "    console.log('Automated processing started for contract: ' + jsonData.data.contract_id);",
              "    console.log('Processing steps: ' + JSON.stringify(jsonData.data.steps_initiated));",
              "});",
              "",
              "// 自动等待5秒后查询自动化处理状态",
              "setTimeout(function(){",
              "    postman.setNextRequest(\"10. 获取自动化处理状态\");",
              "}, 5000);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"force_reprocess\": false\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/{{contract_id}}/process-automated",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "{{contract_id}}", "process-automated"]
        },
        "description": "一键自动化处理合同：OCR识别 → 文档切块 → Elasticsearch同步"
      }
    },
    {
      "name": "16. 全局合同搜索",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has search results\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('contracts');",
              "    pm.expect(jsonData.contracts).to.be.an('array');",
              "    pm.expect(jsonData).to.have.property('total');",
              "    pm.expect(jsonData).to.have.property('page');",
              "    pm.expect(jsonData).to.have.property('size');",
              "});",
              "",
              "pm.test(\"Search metadata valid\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('query');",
              "    pm.expect(jsonData).to.have.property('took');",
              "    pm.expect(jsonData.took).to.be.a('number');",
              "    console.log('Search query: ' + jsonData.query);",
              "    console.log('Search took: ' + jsonData.took + 'ms');",
              "    console.log('Total results: ' + jsonData.total);",
              "});",
              "",
              "pm.test(\"Contract results have required fields\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.contracts.length > 0) {",
              "        var contract = jsonData.contracts[0];",
              "        pm.expect(contract).to.have.property('id');",
              "        pm.expect(contract).to.have.property('contract_name');",
              "        pm.expect(contract).to.have.property('contract_number');",
              "        pm.expect(contract).to.have.property('score');",
              "        console.log('First result: ' + contract.contract_name + ' (score: ' + contract.score + ')');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/elasticsearch/search?q=合同&page=1&size=10",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "elasticsearch", "search"],
          "query": [
            {
              "key": "q",
              "value": "合同",
              "description": "搜索关键词"
            },
            {
              "key": "page",
              "value": "1",
              "description": "页码"
            },
            {
              "key": "size",
              "value": "10",
              "description": "每页大小"
            }
          ]
        },
        "description": "在所有合同中进行全局搜索"
      }
    },
    {
      "name": "17. 职业病危害因素搜索示例",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has content results\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('contents');",
              "    pm.expect(jsonData.contents).to.be.an('array');",
              "    pm.expect(jsonData).to.have.property('total');",
              "    pm.expect(jsonData).to.have.property('page');",
              "    pm.expect(jsonData).to.have.property('size');",
              "});",
              "",
              "pm.test(\"Content search metadata valid\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('query');",
              "    pm.expect(jsonData).to.have.property('took');",
              "    pm.expect(jsonData.took).to.be.a('number');",
              "    console.log('Content search query: ' + jsonData.query);",
              "    console.log('Content search took: ' + jsonData.took + 'ms');",
              "    console.log('Total content results: ' + jsonData.total);",
              "});",
              "",
              "pm.test(\"Content results have required fields\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.contents.length > 0) {",
              "        var content = jsonData.contents[0];",
              "        pm.expect(content).to.have.property('id');",
              "        pm.expect(content).to.have.property('contract_id');",
              "        pm.expect(content).to.have.property('content_text');",
              "        pm.expect(content).to.have.property('score');",
              "        pm.expect(content).to.have.property('highlight');",
              "        console.log('First content result from contract: ' + content.contract_id);",
              "        console.log('Content preview: ' + content.content_text.substring(0, 100) + '...');",
              "        if (content.highlight && content.highlight.content_text) {",
              "            console.log('Highlighted text: ' + content.highlight.content_text[0]);",
              "        }",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/elasticsearch/search?q=职业病危害因素分类目录&page=1&size=10",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "elasticsearch", "search"],
          "query": [
            {
              "key": "q",
              "value": "职业病危害因素分类目录",
              "description": "搜索关键词"
            },
            {
              "key": "page",
              "value": "1",
              "description": "页码"
            },
            {
              "key": "size",
              "value": "10",
              "description": "每页大小"
            }
          ]
        },
        "description": "职业病危害因素搜索示例"
      }
    },
    {
      "name": "18. 删除合同 (谨慎使用)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Contract deleted successfully\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData).to.have.property('contract_id');",
              "    pm.expect(jsonData.message).to.include('删除成功');",
              "});",
              "",
              "pm.test(\"Files deleted\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.deleted_files) {",
              "        pm.expect(jsonData.deleted_files).to.be.an('array');",
              "    }",
              "});",
              "",
              "// 清除环境变量中的contract_id",
              "pm.collectionVariables.unset(\"contract_id\");",
              "console.log(\"Contract ID cleared from variables\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/contracts/{{contract_id}}",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "contracts", "{{contract_id}}"]
        },
        "description": "删除指定合同及相关文件（谨慎使用）"
      }
    },
    {
      "name": "19. 提问并获取AI回答",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has required fields', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data).to.have.property('session_id');",
              "    pm.expect(jsonData.data).to.have.property('message_id');",
              "    pm.expect(jsonData.data).to.have.property('answer');",
              "});",
              "",
              "// 保存session_id和message_id供后续请求使用",
              "if (pm.response.code === 200) {",
              "    var jsonData = pm.response.json();",
              "    pm.collectionVariables.set('session_id', jsonData.data.session_id);",
              "    pm.collectionVariables.set('message_id', jsonData.data.message_id);",
              "    console.log('Session ID saved: ' + jsonData.data.session_id);",
              "    console.log('Message ID saved: ' + jsonData.data.message_id);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"question\": \"请问这个合同的主要内容是什么？\",\n  \"session_id\": null,\n  \"search_method\": \"hybrid\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/v1/qa/ask",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "qa", "ask"]
        },
        "description": "向AI提问并获取基于合同内容的回答"
      }
    },
    {
      "name": "20. 获取会话列表",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has required fields', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data).to.have.property('sessions');",
              "    pm.expect(jsonData.data.sessions).to.be.an('array');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/qa/sessions?page=1&size=10",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "qa", "sessions"],
          "query": [
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "size",
              "value": "10"
            }
          ]
        },
        "description": "获取用户的问答会话列表"
      }
    },
    {
      "name": "21. 获取会话历史记录",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// 检查session_id是否存在",
              "var sessionId = pm.collectionVariables.get('session_id');",
              "if (!sessionId) {",
              "    console.warn('Warning: session_id not set. Please run ask question request first.');",
              "}"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has required fields', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data).to.have.property('session_id');",
              "    pm.expect(jsonData.data).to.have.property('messages');",
              "    pm.expect(jsonData.data.messages).to.be.an('array');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/qa/sessions/{{session_id}}",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "qa", "sessions", "{{session_id}}"]
        },
        "description": "获取指定会话的完整历史记录"
      }
    },
    {
      "name": "22. 提交用户反馈",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// 检查session_id和message_id是否存在",
              "var sessionId = pm.collectionVariables.get('session_id');",
              "var messageId = pm.collectionVariables.get('message_id');",
              "if (!sessionId || !messageId) {",
              "    console.warn('Warning: session_id or message_id not set. Please run ask question request first.');",
              "}"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has success field', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData.success).to.be.true;",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"feedback_type\": \"like\",\n  \"comment\": \"回答很有帮助\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/v1/qa/sessions/{{session_id}}/messages/{{message_id}}/feedback",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "qa", "sessions", "{{session_id}}", "messages", "{{message_id}}", "feedback"]
        },
        "description": "对AI回答提交用户反馈（点赞/点踩/评论）"
      }
    },
    {
      "name": "23. 删除会话",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// 检查session_id是否存在",
              "var sessionId = pm.collectionVariables.get('session_id');",
              "if (!sessionId) {",
              "    console.warn('Warning: session_id not set. Please run ask question request first.');",
              "}"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has success field', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData.success).to.be.true;",
              "});",
              "",
              "// 清除保存的session_id",
              "pm.collectionVariables.unset('session_id');",
              "pm.collectionVariables.unset('message_id');",
              "console.log('Session variables cleared.');"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/qa/sessions/{{session_id}}",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "qa", "sessions", "{{session_id}}"]
        },
        "description": "删除指定的问答会话及其所有消息记录"
      }
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// 全局前置脚本",
          "console.log('Request to: ' + pm.request.url);",
          "console.log('Method: ' + pm.request.method);",
          "",
          "// 检查contract_id是否存在（除了健康检查、上传接口和全局搜索接口）",
          "var requestName = pm.info.requestName;",
          "var needsContractId = ['4. 获取合同详情', '5. 查询OCR状态', '6. 手动触发OCR处理 (GLM-4.1V)', '7. 获取内容状态', '8. 处理内容分块', '9. 获取分块列表', '10. 获取自动化处理状态', '11. 搜索分块', '14. 同步合同到 Elasticsearch', '15. 自动化处理合同（OCR+切片+ES同步）', '18. 删除合同 (谨慎使用)'];",
          "",
          "if (needsContractId.includes(requestName)) {",
          "    var contractId = pm.collectionVariables.get('contract_id');",
          "    if (!contractId) {",
          "        console.warn('Warning: contract_id not set. Please run upload request first.');",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// 全局后置脚本",
          "console.log('Response status: ' + pm.response.status);",
          "console.log('Response time: ' + pm.response.responseTime + 'ms');",
          "",
          "// 记录错误信息",
          "if (pm.response.code >= 400) {",
          "    console.error('Error response: ' + pm.response.text());",
          "}"
        ]
      }
    }
  ]
}